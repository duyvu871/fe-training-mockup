// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================================
// MODELS CHÍNH
// ==========================================

// Bảng người dùng - quản lý xác thực và phân quyền
model User {
  id          String   @id @default(uuid()) @db.Uuid
  username    String   @unique @db.VarChar(50)
  email       String   @unique @db.VarChar(100)
  password    String   @db.VarChar(255)
  firstName   String?  @db.VarChar(50)
  lastName    String?  @db.VarChar(50)
  phone       String?  @db.VarChar(20)
  role        UserRole @default(CASHIER)
  isActive    Boolean  @default(true)
  lastLoginAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orders         Order[]
  stockMovements StockMovement[]
  refreshTokens  RefreshToken[]

  @@map("users")
}

// Bảng danh mục sản phẩm
model Category {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @unique @db.VarChar(100)
  description String?  @db.Text
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

// Bảng sản phẩm
model Product {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @db.VarChar(200)
  sku         String   @unique @db.VarChar(50) // Mã sản phẩm
  description String?  @db.Text
  price       Decimal  @db.Decimal(10, 2)
  cost        Decimal? @db.Decimal(10, 2)
  stock       Int      @default(0)
  minStock    Int      @default(0)
  unit        String   @default("cái") @db.VarChar(20) // Đơn vị tính
  barcode     String?  @unique @db.VarChar(100) // Mã vạch sản phẩm
  image       String?  @db.VarChar(500) // Hình ảnh sản phẩm
  isActive    Boolean  @default(true) // Trạng thái kích hoạt sản phẩm
  categoryId  String   @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category       Category        @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  orderItems     OrderItem[]
  stockMovements StockMovement[]

  // Indexes
  @@index([name])
  @@index([sku])
  @@index([barcode])
  @@index([categoryId])
  @@map("products")
}

// Bảng đơn hàng
model Order {
  id            String        @id @default(uuid()) @db.Uuid
  orderNumber   String        @unique @db.VarChar(50)
  customerName  String?       @db.VarChar(100)
  customerPhone String?       @db.VarChar(20)
  total         Decimal       @db.Decimal(12, 2)
  subtotal      Decimal       @db.Decimal(12, 2)
  tax           Decimal       @default(0) @db.Decimal(10, 2)
  discount      Decimal       @default(0) @db.Decimal(10, 2)
  status        OrderStatus   @default(PENDING)
  paymentMethod PaymentMethod @default(CASH)
  paymentStatus PaymentStatus @default(PENDING)
  notes         String?       @db.Text
  createdById   String        @db.Uuid
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  createdBy  User        @relation(fields: [createdById], references: [id], onDelete: Restrict)
  orderItems OrderItem[]

  // Indexes
  @@index([orderNumber])
  @@index([status])
  @@index([createdAt])
  @@index([createdById])
  @@map("orders")
}

// Bảng chi tiết đơn hàng
model OrderItem {
  id       String  @id @default(uuid()) @db.Uuid
  orderId  String  @db.Uuid
  productId String @db.Uuid
  quantity Int
  price    Decimal @db.Decimal(10, 2)
  subtotal Decimal @db.Decimal(12, 2)

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Restrict)

  // Indexes
  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

// Bảng lịch sử chuyển động kho
model StockMovement {
  id            String            @id @default(uuid()) @db.Uuid
  productId     String            @db.Uuid
  type          StockMovementType
  quantity      Int
  previousStock Int
  newStock      Int
  reason        String?           @db.VarChar(255)
  reference     String?           @db.VarChar(100)
  createdById   String            @db.Uuid
  createdAt     DateTime          @default(now())

  // Relations
  product   Product @relation(fields: [productId], references: [id], onDelete: Restrict)
  createdBy User    @relation(fields: [createdById], references: [id], onDelete: Restrict)

  // Indexes
  @@index([productId])
  @@index([type])
  @@index([createdAt])
  @@map("stock_movements")
}

// Bảng refresh tokens
model RefreshToken {
  id        String   @id @default(uuid()) @db.Uuid
  token     String   @unique @db.VarChar(500)
  userId    String   @db.Uuid
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@map("refresh_tokens")
}

// ==========================================
// ENUMS
// ==========================================

enum UserRole {
  ADMIN
  CASHIER
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  CASH
  CARD
  BANK_TRANSFER
  E_WALLET
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum StockMovementType {
  SALE
  PURCHASE
  ADJUSTMENT
  RETURN
  DAMAGED
}
