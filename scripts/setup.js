#!/usr/bin/env node

/**
 * Setup script cho POS API
 * Ki·ªÉm tra v√† c√†i ƒë·∫∑t t·∫•t c·∫£ dependencies c·∫ßn thi·∫øt
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ B·∫Øt ƒë·∫ßu thi·∫øt l·∫≠p POS API...\n');

// Colors for console output
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

const log = (message, color = colors.reset) => {
  console.log(`${color}${message}${colors.reset}`);
};

const execCommand = (command, description) => {
  try {
    log(`üì¶ ${description}...`, colors.blue);
    execSync(command, { stdio: 'inherit' });
    log(`‚úÖ ${description} th√†nh c√¥ng!\n`, colors.green);
    return true;
  } catch (error) {
    log(`‚ùå ${description} th·∫•t b·∫°i!`, colors.red);
    log(`Error: ${error.message}`, colors.red);
    return false;
  }
};

const checkFile = (filePath, description) => {
  if (fs.existsSync(filePath)) {
    log(`‚úÖ ${description} t·ªìn t·∫°i`, colors.green);
    return true;
  } else {
    log(`‚ùå ${description} kh√¥ng t·ªìn t·∫°i: ${filePath}`, colors.red);
    return false;
  }
};

async function main() {
  let success = true;

  // 1. Ki·ªÉm tra Node.js version
  log('üîç Ki·ªÉm tra phi√™n b·∫£n Node.js...', colors.cyan);
  try {
    const nodeVersion = process.version;
    const majorVersion = parseInt(nodeVersion.slice(1));
    if (majorVersion < 18) {
      log(`‚ùå Node.js version ${nodeVersion} kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. C·∫ßn Node.js 18+`, colors.red);
      success = false;
    } else {
      log(`‚úÖ Node.js ${nodeVersion} OK`, colors.green);
    }
  } catch (error) {
    log('‚ùå Kh√¥ng th·ªÉ ki·ªÉm tra Node.js version', colors.red);
    success = false;
  }

  // 2. Ki·ªÉm tra Docker
  log('üê≥ Ki·ªÉm tra Docker...', colors.cyan);
  try {
    execSync('docker --version', { stdio: 'pipe' });
    execSync('docker-compose --version', { stdio: 'pipe' });
    log('‚úÖ Docker v√† Docker Compose ƒë√£ s·∫µn s√†ng', colors.green);
  } catch (error) {
    log('‚ùå Docker ho·∫∑c Docker Compose ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t', colors.red);
    log('Vui l√≤ng c√†i ƒë·∫∑t Docker Desktop: https://www.docker.com/products/docker-desktop', colors.yellow);
    success = false;
  }

  // 3. Ki·ªÉm tra c√°c file c·∫•u h√¨nh c·∫ßn thi·∫øt
  log('üìÅ Ki·ªÉm tra file c·∫•u h√¨nh...', colors.cyan);
  const requiredFiles = [
    { path: 'package.json', desc: 'Package.json' },
    { path: 'tsconfig.json', desc: 'TypeScript config' },
    { path: 'tsup.config.ts', desc: 'Build config' },
    { path: '.env', desc: 'Environment variables' },
    { path: 'docker-compose.yml', desc: 'Docker compose config' },
    { path: 'prisma/schema.prisma', desc: 'Prisma schema' },
  ];

  for (const file of requiredFiles) {
    if (!checkFile(file.path, file.desc)) {
      success = false;
    }
  }

  if (!success) {
    log('\n‚ùå M·ªôt s·ªë file c·∫•u h√¨nh b·ªã thi·∫øu. Vui l√≤ng ki·ªÉm tra l·∫°i.', colors.red);
    process.exit(1);
  }

  // 4. C√†i ƒë·∫∑t dependencies
  if (!execCommand('npm install', 'C√†i ƒë·∫∑t dependencies')) {
    process.exit(1);
  }

  // 5. Kh·ªüi ƒë·ªông Docker containers
  if (!execCommand('npm run docker:up', 'Kh·ªüi ƒë·ªông PostgreSQL container')) {
    process.exit(1);
  }

  // 6. ƒê·ª£i database s·∫µn s√†ng
  log('‚è≥ ƒê·ª£i database s·∫µn s√†ng...', colors.yellow);
  await new Promise(resolve => setTimeout(resolve, 10000)); // Wait 10 seconds

  // 7. Generate Prisma client
  if (!execCommand('npm run db:generate', 'Generate Prisma client')) {
    process.exit(1);
  }

  // 8. Run database migrations
  if (!execCommand('npm run db:migrate', 'Ch·∫°y database migrations')) {
    process.exit(1);
  }

  // 9. Seed database
  if (!execCommand('npm run db:seed', 'Seed database v·ªõi d·ªØ li·ªáu m·∫´u')) {
    process.exit(1);
  }

  // 10. Build project
  if (!execCommand('npm run build', 'Build project')) {
    process.exit(1);
  }

  // Success message
  log('\nüéâ Thi·∫øt l·∫≠p ho√†n t·∫•t!', colors.green);
  log('\nüìã T√†i kho·∫£n demo:', colors.cyan);
  log('üë§ Admin: admin / password123', colors.yellow);
  log('üè™ Cashier: cashier / password123', colors.yellow);
  
  log('\nüåê ƒê·ªÉ kh·ªüi ƒë·ªông server:', colors.cyan);
  log('npm run dev', colors.yellow);
  
  log('\nüîó Sau khi kh·ªüi ƒë·ªông, truy c·∫≠p:', colors.cyan);
  log('‚Ä¢ API: http://localhost:3000', colors.yellow);
  log('‚Ä¢ Health: http://localhost:3000/health', colors.yellow);
  log('‚Ä¢ Database Studio: npm run db:studio', colors.yellow);
  log('‚Ä¢ pgAdmin: http://localhost:5050', colors.yellow);
}

main().catch(error => {
  log(`\n‚ùå L·ªói trong qu√° tr√¨nh setup: ${error.message}`, colors.red);
  process.exit(1);
});
