
services:
  # PostgreSQL Database for Production
  postgres:
    image: postgres:16-alpine
    container_name: pos-postgres-prod
    restart: unless-stopped
    env_file: .env.prod
    environment:
      TZ: Asia/Ho_Chi_Minh
      POSTGRES_DB: ${POSTGRES_DB:-pos_db}
      POSTGRES_USER: ${POSTGRES_USER:-pos_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-pos_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "127.0.0.1:5443:5432"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./docker/init-scripts:/docker-entrypoint-initdb.d:ro
      - ./backups:/backups
    networks:
      - pos-prod-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-pos_user} -d ${POSTGRES_DB:-pos_db}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # # POS API Application - Production Mode
  # pos-api:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #     target: production
  #   container_name: pos-api-prod
  #   restart: unless-stopped
  #   env_file: .env.prod
  #   environment:
  #     NODE_ENV: production
  #     PORT: 3000
  #     DATABASE_URL: "postgresql://${POSTGRES_USER:-pos_user}:${POSTGRES_PASSWORD:-pos_password}@postgres:5432/${POSTGRES_DB:-pos_db}?schema=public"
  #     JWT_SECRET: ${JWT_SECRET}
  #     JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
  #     JWT_EXPIRE: ${JWT_EXPIRE:-15m}
  #     JWT_REFRESH_EXPIRE: ${JWT_REFRESH_EXPIRE:-7d}
  #     BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-12}
  #     CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
  #     RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
  #     RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
  #     LOG_LEVEL: ${LOG_LEVEL:-info}
  #     APP_NAME: ${APP_NAME:-"POS API Production"}
  #     APP_VERSION: ${APP_VERSION:-1.0.0}
  #     APP_URL: ${APP_URL:-http://localhost:3000}
  #   ports:
  #     - "3002:3000"
  #   volumes:
  #     - ./uploads:/app/uploads
  #     - ./logs:/app/logs
  #     - ./backups:/app/backups
  #   networks:
  #     - pos-prod-network
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:3400/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 40s
  #   command: >
  #     sh -c "
  #       echo 'Waiting for database to be ready...' &&
  #       npx prisma db push --skip-generate &&
  #       if [ $$(node -e 'const { PrismaClient } = require(\"@prisma/client\"); const prisma = new PrismaClient(); prisma.user.count().then(count => { console.log(count); process.exit(0); }).catch(() => { console.log(0); process.exit(1); })') -eq 0 ]; then
  #         echo 'Database is empty, running seed...' &&
  #         npx prisma db seed;
  #       else
  #         echo 'Database already has data, skipping seed...';
  #       fi &&
  #       npm start
  #     "

volumes:
  postgres_prod_data:
    driver: local
    
networks:
  pos-prod-network:
    driver: bridge
